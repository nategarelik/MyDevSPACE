// Export main BMAD Orchestrator\nexport { BMADOrchestrator } from './BMADOrchestrator';\n\n// Export types\nexport * from './types';\n\n// Export phases\nexport { IntelligentPlanningPhase } from './phases/IntelligentPlanningPhase';\nexport { ContextEngineeredDevelopmentPhase } from './phases/ContextEngineeredDevelopmentPhase';\n\n// Export agents\nexport { AgentManager } from './agents/AgentManager';\n\n// Export services\nexport { TaskSharder } from './services/TaskSharder';\nexport { CostOptimizer } from './services/CostOptimizer';\nexport { ContextManager } from './services/ContextManager';\n\n// Export version and utilities\nexport const BMAD_VERSION = '5.1.3';\nexport const BMAD_BUILD = Date.now().toString();\n\n// Export configuration helpers\nexport const createBMADConfig = (overrides?: any) => ({\n  version: BMAD_VERSION,\n  project: {\n    defaultTemplate: 'agile-web-app',\n    requirementsValidation: true,\n    architectureValidation: true,\n    automaticStoryGeneration: true,\n    ...overrides?.project\n  },\n  agents: {\n    maxConcurrentTasks: 5,\n    taskTimeout: 30,\n    qualityThreshold: 85,\n    retryAttempts: 3,\n    ...overrides?.agents\n  },\n  workflow: {\n    automaticProgression: true,\n    reviewRequired: false,\n    parallelExecution: true,\n    checkpointFrequency: 15,\n    ...overrides?.workflow\n  },\n  optimization: {\n    tokenOptimization: true,\n    cacheEnabled: true,\n    compressionStrategy: 'intelligent' as const,\n    costTracking: true,\n    ...overrides?.optimization\n  },\n  integration: {\n    superClaude: true,\n    mcpServers: ['context7', 'sequential', 'magic'],\n    externalTools: {},\n    webhooks: [],\n    ...overrides?.integration\n  }\n});\n\n// Export a default BMAD instance for convenience\nexport const bmadOrchestrator = BMADOrchestrator.getInstance();\n\n// Export main class for easy instantiation\nexport default BMADOrchestrator;
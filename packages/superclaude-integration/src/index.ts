// Core Types\nexport * from './types';\n\n// Command System\nexport { CommandRegistry } from './commands/CommandRegistry';\nexport { BuildCommand } from './commands/BuildCommand';\nexport { TestCommand } from './commands/TestCommand';\nexport { ReviewCommand } from './commands/ReviewCommand';\nexport { DeployCommand } from './commands/DeployCommand';\nexport { DesignCommand } from './commands/DesignCommand';\n\n// Import all other commands\nexport { AnalyzeCommand } from './commands/AnalyzeCommand';\nexport { RefactorCommand } from './commands/RefactorCommand';\nexport { OptimizeCommand } from './commands/OptimizeCommand';\nexport { DebugCommand } from './commands/DebugCommand';\nexport { DocumentCommand } from './commands/DocumentCommand';\nexport { GenerateCommand } from './commands/GenerateCommand';\nexport { MigrateCommand } from './commands/MigrateCommand';\nexport { ValidateCommand } from './commands/ValidateCommand';\nexport { MonitorCommand } from './commands/MonitorCommand';\nexport { BackupCommand } from './commands/BackupCommand';\nexport { SyncCommand } from './commands/SyncCommand';\nexport { ConfigureCommand } from './commands/ConfigureCommand';\nexport { TemplateCommand } from './commands/TemplateCommand';\nexport { SecurityCommand } from './commands/SecurityCommand';\nexport { PerformanceCommand } from './commands/PerformanceCommand';\nexport { AIAssistCommand } from './commands/AIAssistCommand';\n\n// Agent System\nexport { AgentService } from './agents/AgentService';\nexport { SecurityEngineerAgent } from './agents/SecurityEngineerAgent';\nexport { FrontendArchitectAgent } from './agents/FrontendArchitectAgent';\nexport { BackendDeveloperAgent } from './agents/BackendDeveloperAgent';\nexport { SystemArchitectAgent } from './agents/SystemArchitectAgent';\nexport { QAEngineerAgent } from './agents/QAEngineerAgent';\nexport { DevOpsEngineerAgent } from './agents/DevOpsEngineerAgent';\nexport { DatabaseSpecialistAgent } from './agents/DatabaseSpecialistAgent';\nexport { UIUXDesignerAgent } from './agents/UIUXDesignerAgent';\nexport { ProductManagerAgent } from './agents/ProductManagerAgent';\nexport { DataScientistAgent } from './agents/DataScientistAgent';\nexport { PerformanceEngineerAgent } from './agents/PerformanceEngineerAgent';\nexport { TechnicalWriterAgent } from './agents/TechnicalWriterAgent';\nexport { ProjectManagerAgent } from './agents/ProjectManagerAgent';\nexport { MLEngineerAgent } from './agents/MLEngineerAgent';\n\n// Services\nexport { TokenOptimizer } from './services/TokenOptimizer';\nexport { MCPService } from './services/MCPService';\n\n// Main SuperClaude Integration Class\nexport class SuperClaudeIntegration {\n  private commandRegistry: CommandRegistry;\n  private agentService: AgentService;\n  private tokenOptimizer: TokenOptimizer;\n  private mcpService: MCPService;\n\n  constructor() {\n    this.commandRegistry = CommandRegistry.getInstance();\n    this.agentService = AgentService.getInstance();\n    this.tokenOptimizer = new TokenOptimizer();\n    this.mcpService = MCPService.getInstance();\n  }\n\n  // Initialize the complete SuperClaude framework\n  public async initialize(): Promise<void> {\n    console.log('ðŸš€ Initializing SuperClaude V4.40.0 Integration...');\n    \n    // Connect to all MCP servers\n    console.log('ðŸ“¡ Connecting to MCP servers...');\n    const mcpConnections = await this.mcpService.connectAllServers();\n    console.log('MCP Server Status:', mcpConnections);\n    \n    // Verify all agents are ready\n    console.log('ðŸ¤– Initializing AI agents...');\n    const agents = this.agentService.getAllAgents();\n    console.log(`âœ… ${agents.length} AI agents ready`);\n    \n    // Test token optimization\n    console.log('âš¡ Testing token optimization...');\n    const testOptimization = await this.tokenOptimizer.optimizeTokens(\n      'This is a test content for token optimization validation.',\n      { focusAreas: ['testing'] },\n      'hybrid'\n    );\n    console.log(`ðŸŽ¯ Token optimization: ${testOptimization.reductionPercentage}% reduction achieved`);\n    \n    console.log('âœ… SuperClaude V4.40.0 Integration initialized successfully!');\n  }\n\n  // Execute SuperClaude commands\n  public async executeCommand(command: string, context: any, args?: any): Promise<any> {\n    const commandName = command as any; // Type assertion for flexibility\n    return this.commandRegistry.executeCommand(commandName, context, args);\n  }\n\n  // Get available commands\n  public getAvailableCommands(): { name: string; description: string }[] {\n    return this.commandRegistry.listCommands();\n  }\n\n  // Get agent status\n  public getAgentStatus(): any {\n    return this.agentService.getAgentStatus();\n  }\n\n  // Get MCP server status\n  public getMCPStatus(): { [serverId: string]: string } {\n    return this.mcpService.getServerStatus();\n  }\n\n  // Optimize tokens for content\n  public async optimizeTokens(content: string, context?: any): Promise<any> {\n    return this.tokenOptimizer.optimizeTokens(content, context, 'hybrid');\n  }\n\n  // Get optimization statistics\n  public getOptimizationStats(): any {\n    return this.tokenOptimizer.getOptimizationStats();\n  }\n\n  // Execute multi-agent collaboration\n  public async collaborateAgents(task: any, requiredCapabilities: string[]): Promise<any> {\n    return this.agentService.coordinateMultiAgentTask(task, requiredCapabilities);\n  }\n\n  // Health check for all systems\n  public async healthCheck(): Promise<any> {\n    const mcpHealth = await this.mcpService.healthCheck();\n    const agentStatus = this.agentService.getAgentStatus();\n    \n    return {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      components: {\n        mcpServers: mcpHealth,\n        agents: Object.keys(agentStatus).reduce((acc, agentId) => {\n          acc[agentId] = agentStatus[agentId].status;\n          return acc;\n        }, {} as any),\n        tokenOptimizer: 'active',\n        commandRegistry: 'active'\n      }\n    };\n  }\n\n  // Graceful shutdown\n  public async shutdown(): Promise<void> {\n    console.log('ðŸ”„ Shutting down SuperClaude Integration...');\n    await this.mcpService.disconnectAllServers();\n    this.tokenOptimizer.clearCache();\n    console.log('âœ… SuperClaude Integration shutdown complete');\n  }\n}\n\n// Export a default instance for convenience\nexport const superClaude = new SuperClaudeIntegration();\n\n// Export version info\nexport const VERSION = '4.40.0';\nexport const BUILD = Date.now().toString();\n\n// Export configuration helpers\nexport const createSuperClaudeConfig = (overrides?: any) => ({\n  version: VERSION,\n  features: {\n    tokenOptimization: true,\n    multiAgentSystem: true,\n    mcpIntegration: true,\n    evidenceBasedOperation: true,\n    specializedCommands: true\n  },\n  optimization: {\n    tokenReduction: 70, // 70% token reduction\n    cacheEnabled: true,\n    compressionStrategy: 'hybrid',\n    contextWindow: 'extended'\n  },\n  agents: {\n    securityEngineer: true,\n    frontendArchitect: true,\n    backendDeveloper: true,\n    systemArchitect: true,\n    qaEngineer: true,\n    devOpsEngineer: true,\n    databaseSpecialist: true,\n    uiUxDesigner: true,\n    productManager: true,\n    dataScientist: true,\n    performanceEngineer: true,\n    technicalWriter: true,\n    projectManager: true,\n    mlEngineer: true\n  },\n  mcpServers: {\n    context7: true,\n    sequential: true,\n    magic: true,\n    playwright: true,\n    morphllm: true,\n    serena: true\n  },\n  ...overrides\n});